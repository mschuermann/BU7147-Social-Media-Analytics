# Coreness -> mean (average distance to all the other nodes, diffusion of information)
plot(bigrams.network_s,
layout = layout_with_fr,
vertex.label.color = "black",
vertex.label.cex = 0.9,
vertex.label.dist = 0,
vertex.frame.color = 0,
vertex.size = core_s*10,
edge.arrow.size = 0.01,
edge.curved = 0.7,
edge.color = "gray",
main = "Bigram Communities (Samsung)"
)
mtext("Coreness")
# Other sizes we tried but Coreness worked best for our models
# Using "Degree" as size
# degree=mode (number of edges of the node, in-degree:prestige
#
# plot(bigrams.network_s,
#      layout = layout_with_fr,
#      vertex.label.color = "black",
#      vertex.label.cex = 0.6,
#      vertex.label.dist = 0,
#      vertex.frame.color = 0,
#      vertex.size = deg_s,
#      edge.arrow.size = 0.1,
#      edge.curved = 1,
#      edge.color = "gray",
#      main = "Bigram Communities (Samsung)"
# )
# mtext("Degree")
#
# # Using "Eigenvector Centrality" as size
# # centrality (the most connected words)
# plot(bigrams.network_s,
#      layout = layout_with_fr,
#      vertex.label.color = "black",
#      vertex.label.cex = 0.6,
#      vertex.label.dist = 0,
#      vertex.size = eigen_s$vector*20,
#      edge.arrow.size = 0.1,
#      edge.curved = 1,
#      edge.color = "gray",
#      main = "Bigram Communities (Samsung)"
# )
# mtext("Eigenvector Centrality")
#
# # Using "Betweenness" as size
# #Betweenness -> median (weighted # of paths going through the node)
# plot(bigrams.network_s,
#      layout = layout_with_fr,
#      vertex.label.color = "black",
#      vertex.label.cex = 0.6,
#      vertex.label.dist = 0,
#      vertex.size = betw_s,
#      edge.arrow.size = 0.1,
#      edge.curved = 1,
#      edge.color = "gray",
#      main = "Bigram Communities (Samsung)"
# )
# mtext("Betweenness")
# now we find the centrality measures of the network
# degree:the number of its adjacent edges (measure of direct influence)
deg_s <- degree(bigrams.network_s, mode = "all")
#K-core decomposition allows us to identify the core and the periphery of the network. A k-core is a maximal subnet of a network such that all nodes have at least degree K.
core_s <- coreness(bigrams.network_s, mode = "all")
# betweenness measures brokerage or gatekeeping potential. It is (approximately) the number of shortest paths between nodes that pass through a particular node.
betw_s <- betweenness(bigrams.network_s)
#Eigenvector centrality is a measure of being well-connected connected to the well-connected. First eigenvector of the graph adjacency matrix. Only works with undirected networks.
eigen_s <- eigen_centrality(bigrams.network_s, directed = TRUE)
members_s <- cluster_walktrap(bigrams.network_s)
library(igraph)
bigrams.network_s <- simplify(bigrams.network_s
#remove.multiple = FALSE, #error occured ?
#remove.loops = TRUE)
)
V(bigrams.network_s)$color <- members_s$membership+1
# Using "Coreness" as size
# Coreness -> mean (average distance to all the other nodes, diffusion of information)
plot(bigrams.network_s,
layout = layout_with_fr,
vertex.label.color = "black",
vertex.label.cex = 0.9,
vertex.label.dist = 0,
vertex.frame.color = 0,
vertex.size = core_s*10,
edge.arrow.size = 0.01,
edge.curved = 0.7,
edge.color = "gray",
main = "Bigram Communities (Samsung)"
)
mtext("Coreness")
# Other sizes we tried but Coreness worked best for our models
# Using "Degree" as size
# degree=mode (number of edges of the node, in-degree:prestige
#
# plot(bigrams.network_s,
#      layout = layout_with_fr,
#      vertex.label.color = "black",
#      vertex.label.cex = 0.6,
#      vertex.label.dist = 0,
#      vertex.frame.color = 0,
#      vertex.size = deg_s,
#      edge.arrow.size = 0.1,
#      edge.curved = 1,
#      edge.color = "gray",
#      main = "Bigram Communities (Samsung)"
# )
# mtext("Degree")
#
# # Using "Eigenvector Centrality" as size
# # centrality (the most connected words)
# plot(bigrams.network_s,
#      layout = layout_with_fr,
#      vertex.label.color = "black",
#      vertex.label.cex = 0.6,
#      vertex.label.dist = 0,
#      vertex.size = eigen_s$vector*20,
#      edge.arrow.size = 0.1,
#      edge.curved = 1,
#      edge.color = "gray",
#      main = "Bigram Communities (Samsung)"
# )
# mtext("Eigenvector Centrality")
#
# # Using "Betweenness" as size
# #Betweenness -> median (weighted # of paths going through the node)
# plot(bigrams.network_s,
#      layout = layout_with_fr,
#      vertex.label.color = "black",
#      vertex.label.cex = 0.6,
#      vertex.label.dist = 0,
#      vertex.size = betw_s,
#      edge.arrow.size = 0.1,
#      edge.curved = 1,
#      edge.color = "gray",
#      main = "Bigram Communities (Samsung)"
# )
# mtext("Betweenness")
# now we find the centrality measures of the network
# degree:the number of its adjacent edges (measure of direct influence)
deg_s <- degree(bigrams.network_s, mode = "all")
#K-core decomposition allows us to identify the core and the periphery of the network. A k-core is a maximal subnet of a network such that all nodes have at least degree K.
core_s <- coreness(bigrams.network_s, mode = "all")
# betweenness measures brokerage or gatekeeping potential. It is (approximately) the number of shortest paths between nodes that pass through a particular node.
betw_s <- betweenness(bigrams.network_s)
#Eigenvector centrality is a measure of being well-connected connected to the well-connected. First eigenvector of the graph adjacency matrix. Only works with undirected networks.
eigen_s <- eigen_centrality(bigrams.network_s, directed = TRUE)
members_s <- cluster_walktrap(bigrams.network_s)
library(igraph)
bigrams.network_s <- simplify(bigrams.network_s
#remove.multiple = FALSE, #error occured ?
#remove.loops = TRUE)
)
V(bigrams.network_s)$color <- members_s$membership+1
# Using "Coreness" as size
# Coreness -> mean (average distance to all the other nodes, diffusion of information)
plot(bigrams.network_s,
layout = layout_with_fr,
vertex.label.color = "black",
vertex.label.cex = 0.9,
vertex.label.dist = 0,
vertex.frame.color = 0,
vertex.size = core_s*10,
edge.arrow.size = 0.01,
edge.curved = 0.7,
edge.color = "gray",
main = "Bigram Communities (Samsung)"
)
mtext("Coreness")
# Other sizes we tried but Coreness worked best for our models
# Using "Degree" as size
# degree=mode (number of edges of the node, in-degree:prestige
#
# plot(bigrams.network_s,
#      layout = layout_with_fr,
#      vertex.label.color = "black",
#      vertex.label.cex = 0.6,
#      vertex.label.dist = 0,
#      vertex.frame.color = 0,
#      vertex.size = deg_s,
#      edge.arrow.size = 0.1,
#      edge.curved = 1,
#      edge.color = "gray",
#      main = "Bigram Communities (Samsung)"
# )
# mtext("Degree")
#
# # Using "Eigenvector Centrality" as size
# # centrality (the most connected words)
# plot(bigrams.network_s,
#      layout = layout_with_fr,
#      vertex.label.color = "black",
#      vertex.label.cex = 0.6,
#      vertex.label.dist = 0,
#      vertex.size = eigen_s$vector*20,
#      edge.arrow.size = 0.1,
#      edge.curved = 1,
#      edge.color = "gray",
#      main = "Bigram Communities (Samsung)"
# )
# mtext("Eigenvector Centrality")
#
# # Using "Betweenness" as size
# #Betweenness -> median (weighted # of paths going through the node)
# plot(bigrams.network_s,
#      layout = layout_with_fr,
#      vertex.label.color = "black",
#      vertex.label.cex = 0.6,
#      vertex.label.dist = 0,
#      vertex.size = betw_s,
#      edge.arrow.size = 0.1,
#      edge.curved = 1,
#      edge.color = "gray",
#      main = "Bigram Communities (Samsung)"
# )
# mtext("Betweenness")
# now we find the centrality measures of the network
# degree:the number of its adjacent edges (measure of direct influence)
deg_a <- degree(bigrams.network_a, mode = "all")
#K-core decomposition allows us to identify the core and the periphery of the network. A k-core is a maximal subnet of a network such that all nodes have at least degree K.
core_a <- coreness(bigrams.network_a, mode = "all")
# betweenness measures brokerage or gatekeeping potential. It is (approximately) the number of shortest paths between nodes that pass through a particular node.
betw_a <- betweenness(bigrams.network_a)
#Eigenvector centrality is a measure of being well-connected connected to the well-connected. First eigenvector of the graph adjacency matrix. Only works with undirected networks.
eigen_a <- eigen_centrality(bigrams.network_a, directed = TRUE)
members_a <- cluster_walktrap(bigrams.network_a)
library(igraph)
bigrams.network_a <- simplify(bigrams.network_a
#remove.multiple = FALSE, #error occured ?
#remove.loops = TRUE)
)
V(bigrams.network_a)$color <- members_a$membership+1
# Using "Coreness" as size
# Coreness -> mean (average distance to all the other nodes, diffusion of information)
plot(bigrams.network_a,
layout = layout_with_fr,
vertex.label.color = "black",
vertex.label.cex = 0.6,
vertex.label.dist = 0,
vertex.frame.color = 0,
vertex.size = core_a*10,
edge.arrow.size = 0.1,
edge.curved = 1,
edge.color = "gray",
main = "Bigram Communities (iPhone 13)"
)
mtext("Coreness")
# Other sizes we tried but Coreness worked best for our models
# # Using "Degree" as size
# # degree=mode (number of edges of the node, in-degree:prestige
#
# plot(bigrams.network_a,
#      layout = layout_with_fr,
#      vertex.label.color = "black",
#      vertex.label.cex = 0.6,
#      vertex.label.dist = 0,
#      vertex.frame.color = 0,
#      vertex.size = deg_a,
#      edge.arrow.size = 0.1,
#      edge.curved = 1,
#      edge.color = "gray",
#      main = "Bigram Communities (iPhone 13)"
# )
# mtext("Degree")
#
# # Using "Eigenvector Centrality" as size
# # centrality (the most connected words)
# plot(bigrams.network_a,
#      layout = layout_with_fr,
#      vertex.label.color = "black",
#      vertex.label.cex = 0.6,
#      vertex.label.dist = 0,
#      vertex.size = eigen_a$vector*20,
#      edge.arrow.size = 0.1,
#      edge.curved = 1,
#      edge.color = "gray",
#      main = "Bigram Communities (iPhone 13)"
# )
# mtext("Eigenvector Centrality")
#
# # Using "Betweenness" as size
# #Betweenness -> median (weighted # of paths going through the node)
# plot(bigrams.network_a,
#      layout = layout_with_fr,
#      vertex.label.color = "black",
#      vertex.label.cex = 0.6,
#      vertex.label.dist = 0,
#      vertex.size = betw_a,
#      edge.arrow.size = 0.1,
#      edge.curved = 1,
#      edge.color = "grey",
#      main = "Bigram Communities (iPhone 13)"
# )
# mtext("Betweenness")
# now we find the centrality measures of the network
# degree:the number of its adjacent edges (measure of direct influence)
deg_s <- degree(bigrams.network_s, mode = "all")
#K-core decomposition allows us to identify the core and the periphery of the network. A k-core is a maximal subnet of a network such that all nodes have at least degree K.
core_s <- coreness(bigrams.network_s, mode = "all")
# betweenness measures brokerage or gatekeeping potential. It is (approximately) the number of shortest paths between nodes that pass through a particular node.
betw_s <- betweenness(bigrams.network_s)
#Eigenvector centrality is a measure of being well-connected connected to the well-connected. First eigenvector of the graph adjacency matrix. Only works with undirected networks.
eigen_s <- eigen_centrality(bigrams.network_s, directed = TRUE)
members_s <- cluster_walktrap(bigrams.network_s)
library(igraph)
bigrams.network_s <- simplify(bigrams.network_s
#remove.multiple = FALSE, #error occured ?
#remove.loops = TRUE)
)
V(bigrams.network_s)$color <- members_s$membership+1
# now we find the centrality measures of the network
# degree:the number of its adjacent edges (measure of direct influence)
deg_s <- degree(bigrams.network_s, mode = "all")
#K-core decomposition allows us to identify the core and the periphery of the network. A k-core is a maximal subnet of a network such that all nodes have at least degree K.
core_s <- coreness(bigrams.network_s, mode = "all")
# betweenness measures brokerage or gatekeeping potential. It is (approximately) the number of shortest paths between nodes that pass through a particular node.
betw_s <- betweenness(bigrams.network_s)
#Eigenvector centrality is a measure of being well-connected connected to the well-connected. First eigenvector of the graph adjacency matrix. Only works with undirected networks.
eigen_s <- eigen_centrality(bigrams.network_s, directed = TRUE)
members_s <- cluster_walktrap(bigrams.network_s)
library(igraph)
bigrams.network_s <- simplify(bigrams.network_s
#remove.multiple = FALSE, #error occured ?
#remove.loops = TRUE)
)
V(bigrams.network_s)$color <- members_s$membership+1
# if you want to ignore words that are frequent but doesn't help, add them to this list. ###Ignore the words
ignore.words <- data_frame(word = c( "samsung","phone"))
# create the words freq table
word.freq.table_s <- samsung.reviews.text %>%
unnest_tokens(word, review_text) %>%
anti_join(stop_words) %>%
anti_join(ignore.words) %>%
dplyr::count(word, sort = TRUE)
word.freq.table_s
# Plotting a Wordcloud
word.freq.table_s %>%
filter(n>8) %>%
with(wordcloud(word, n,
scale = c(5,0.3),
colors = brewer.pal(8, "Dark2")))
# if you want to ignore words that are frequent but doesn't help, add them to this list. ###Ignore the words
ignore.words <- data_frame(word = c( "samsung","phone"))
# create the words freq table
word.freq.table_s <- samsung.reviews.text %>%
unnest_tokens(word, review_text) %>%
anti_join(stop_words) %>%
anti_join(ignore.words) %>%
dplyr::count(word, sort = TRUE)
word.freq.table_s
# Plotting a Wordcloud
word.freq.table_s %>%
filter(n>8) %>%
with(wordcloud(word, n,
scale = c(5,0.3),
colors = brewer.pal(8, "Dark2")))
# if you want to ignore words that are frequent but doesn't help, add them to this list. ###Ignore the words
ignore.words <- data_frame(word = c( "samsung","phone"))
# create the words freq table
word.freq.table_s <- samsung.reviews.text %>%
unnest_tokens(word, review_text) %>%
anti_join(stop_words) %>%
anti_join(ignore.words) %>%
dplyr::count(word, sort = TRUE)
word.freq.table_s
# Plotting a Wordcloud
word.freq.table_s %>%
filter(n>8) %>%
with(wordcloud(word, n,
scale = c(5,0.3),
colors = brewer.pal(8, "Dark2")))
# Plotting a Wordcloud
word.freq.table_s %>%
filter(n>8) %>%
with(wordcloud(word, n,
scale = c(5,0.3),
colors = brewer.pal(8, "Dark2")))
# Plotting a Wordcloud
word.freq.table_a %>%
filter(n>8) %>%
with(wordcloud(word, n,
scale = c(5,0.3),
colors = brewer.pal(8, "Dark2")))
shifted.words <- iphone.reviews.text %>%
unnest_tokens(bigram, review_text, token = "ngrams", n = 2)%>%
dplyr::count(bigram, sort = TRUE) %>%
separate(bigram, c("word1", "word2"), sep = " ")%>%
filter(word1 %in% negation.words & !word2 %in% stop_words$word)%>%
inner_join(get_sentiments("bing"), by = c(word2 = "word"))%>%
mutate(sentiment = ifelse(sentiment == "positive", 1, -1)) %>%
mutate(score = sentiment * n) %>%
mutate(word2 = reorder(word2, score))
shifted.words
iphone.reviews.text <- mgsub(iphone.reviews.text$review_text, negated.phrases, synonyms) %>%
dplyr::as_data_frame() %>%
rename(review_text = value)
iphone.reviews.text
shifted.words <- iphone.reviews.text %>%
unnest_tokens(bigram, review_text, token = "ngrams", n = 2)%>%
dplyr::count(bigram, sort = TRUE) %>%
separate(bigram, c("word1", "word2"), sep = " ")%>%
filter(word1 %in% negation.words & !word2 %in% stop_words$word)%>%
inner_join(get_sentiments("bing"), by = c(word2 = "word"))%>%
mutate(sentiment = ifelse(sentiment == "positive", 1, -1)) %>%
mutate(score = sentiment * n) %>%
mutate(word2 = reorder(word2, score))
shifted.words
iphone.reviews.text <- mgsub(iphone.reviews.text$review_text, negated.phrases, synonyms) %>%
dplyr::as_data_frame() %>%
rename(review_text = value)
iphone.reviews.text
# if you want to ignore words that are frequent but doesn't help, add them to this list. ###Ignore the words
ignore.words <- data_frame(word = c( "samsung","phone"))
# create the words freq table
word.freq.table_s <- samsung.reviews.text %>%
unnest_tokens(word, review_text) %>%
anti_join(stop_words) %>%
anti_join(ignore.words) %>%
dplyr::count(word, sort = TRUE)
word.freq.table_s
# Plotting a Wordcloud
word.freq.table_s %>%
filter(n>8) %>%
with(wordcloud(word, n,
scale = c(5,0.3),
colors = brewer.pal(8, "Dark2")))
# if you want to ignore words that are frequent but doesn't help, add them to this list. ###Ignore the words
ignore.words <- data_frame(word = c( "samsung","phone"))
# create the words freq table
word.freq.table_s <- samsung.reviews.text %>%
unnest_tokens(word, review_text) %>%
anti_join(stop_words) %>%
anti_join(ignore.words) %>%
dplyr::count(word, sort = TRUE)
word.freq.table_s
# Plotting a Wordcloud
word.freq.table_s %>%
filter(n>8) %>%
with(wordcloud(word, n,
scale = c(5,0.3),
colors = brewer.pal(8, "Dark2")))
# Most common Positive and Negative words using Bing
iphone.reviews.text %>%
unnest_tokens(word, review_text) %>%
anti_join(stop_words) %>%
anti_join(ignore.words) %>%
inner_join(get_sentiments("bing")) %>%
dplyr::count(word, sentiment, sort = TRUE) %>%
filter(n > 2) %>%
mutate(word = reorder(word, n)) %>%
mutate(percent = round(n/sum(n), 3)) %>%
ggplot(aes(x = word, y = percent, fill = sentiment, label = percent)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
geom_text(aes(y = 0.7*percent)) +
labs(title = "iPhone 13 Word Polarity (bing)") +
coord_flip() +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# Bing Samsung
bing.mean.score_s <- word.freq.table_s %>%
inner_join(get_sentiments("bing")) %>%
mutate(sentiment = ifelse(sentiment == "positive", 1, -1)) %>%
summarise(Samsung_mean = mean(sentiment))
bing.mean.score_a <- word.freq.table_a %>%
inner_join(get_sentiments("bing")) %>%
mutate(sentiment = ifelse(sentiment == "positive", 1, -1)) %>%
summarise(Apple_mean = mean(sentiment))
data.frame(bing.mean.score_s, bing.mean.score_a)
#Samsung
# rescale the range to 5 star range.
bing.mean.score_s<-rescale(bing.mean.score_s$mean, to = c(1,5), from = c(-1,1))
# Afinn scores are from -5 to 5.
afinn.mean.score_s <- word.freq.table_s %>%
inner_join(get_sentiments("afinn"))%>%
summarise(Samsung_mean = mean(value))
# rescale the range to 5 star range.
afinn.mean.score_s<-rescale(afinn.mean.score_s$Samsung_mean, to = c(1,5), from = c(-5,5))
#Apple
# rescale the range to 5 star range.
bing.mean.score_a<-rescale(bing.mean.score_a$mean, to = c(1,5), from = c(-1,1))
# Afinn scores are from -5 to 5.
afinn.mean.score_a <- word.freq.table_a %>%
inner_join(get_sentiments("afinn"))%>%
summarise(Apple_mean = mean(value))
# rescale the range to 5 star range.
afinn.mean.score_a<-rescale(afinn.mean.score_a$Apple_mean, to = c(1,5), from = c(-5,5))
afinn.mean.score_a
data.table(afinn.mean.score_s, afinn.mean.score_a)
# Correlation Terms
# The correlation of appearing together in a review
samsung.correlation.terms <- samsung.reviews.text %>%
mutate(review = row_number()) %>%
unnest_tokens(word, review_text) %>%
filter(!word %in% stop_words$word) %>%
group_by(word) %>%
filter(n() >=7)%>%
pairwise_cor(word, review, sort = TRUE)
samsung.correlation.terms
library(ggraph)
library(igraph)
samsung.correlation.terms %>%
filter(correlation >= 0.50) %>%
graph_from_data_frame() %>%
ggraph(layout = "igraph", algorithm = "kk") +
geom_edge_link(aes(alpha = correlation),
show.legend = FALSE)+
geom_node_point(color = "lightblue", size = 2) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()+
ggtitle("Correlation of terms in Samsung S22 Reviews")
